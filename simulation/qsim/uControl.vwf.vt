// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2017 15:49:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    uControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uControl_vlg_sample_tst(
	clk,
	div0,
	eqf,
	funct,
	gtf,
	opCode,
	ov,
	reset,
	sampler_tx
);
input  clk;
input  div0;
input  eqf;
input [5:0] funct;
input  gtf;
input [5:0] opCode;
input  ov;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or div0 or eqf or funct or gtf or opCode or ov or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module uControl_vlg_check_tst (
	ALUCtrl,
	ALUOutCtrl,
	ALUSrcA,
	ALUSrcB,
	DataSrc,
	EPCCtrl,
	ExcptCtrl,
	HILOWrite,
	IRWrite,
	IorD,
	LSCtrl,
	MDCtrl,
	MemCtrl,
	PCCtrl,
	PCSrc,
	RegDst,
	RegWrite,
	SECtrl,
	SSCtrl,
	ShiftAmt,
	ShiftCtrl,
	ShiftSrc,
	sampler_rx
);
input [2:0] ALUCtrl;
input  ALUOutCtrl;
input [1:0] ALUSrcA;
input [1:0] ALUSrcB;
input [3:0] DataSrc;
input  EPCCtrl;
input [1:0] ExcptCtrl;
input  HILOWrite;
input  IRWrite;
input [1:0] IorD;
input [1:0] LSCtrl;
input  MDCtrl;
input  MemCtrl;
input  PCCtrl;
input [2:0] PCSrc;
input [1:0] RegDst;
input  RegWrite;
input  SECtrl;
input [1:0] SSCtrl;
input  ShiftAmt;
input [2:0] ShiftCtrl;
input  ShiftSrc;
input sampler_rx;

reg [2:0] ALUCtrl_expected;
reg  ALUOutCtrl_expected;
reg [1:0] ALUSrcA_expected;
reg [1:0] ALUSrcB_expected;
reg [3:0] DataSrc_expected;
reg  EPCCtrl_expected;
reg [1:0] ExcptCtrl_expected;
reg  HILOWrite_expected;
reg  IRWrite_expected;
reg [1:0] IorD_expected;
reg [1:0] LSCtrl_expected;
reg  MDCtrl_expected;
reg  MemCtrl_expected;
reg  PCCtrl_expected;
reg [2:0] PCSrc_expected;
reg [1:0] RegDst_expected;
reg  RegWrite_expected;
reg  SECtrl_expected;
reg [1:0] SSCtrl_expected;
reg  ShiftAmt_expected;
reg [2:0] ShiftCtrl_expected;
reg  ShiftSrc_expected;

reg [2:0] ALUCtrl_prev;
reg  ALUOutCtrl_prev;
reg [1:0] ALUSrcA_prev;
reg [1:0] ALUSrcB_prev;
reg [3:0] DataSrc_prev;
reg  EPCCtrl_prev;
reg [1:0] ExcptCtrl_prev;
reg  HILOWrite_prev;
reg  IRWrite_prev;
reg [1:0] IorD_prev;
reg [1:0] LSCtrl_prev;
reg  MDCtrl_prev;
reg  MemCtrl_prev;
reg  PCCtrl_prev;
reg [2:0] PCSrc_prev;
reg [1:0] RegDst_prev;
reg  RegWrite_prev;
reg  SECtrl_prev;
reg [1:0] SSCtrl_prev;
reg  ShiftAmt_prev;
reg [2:0] ShiftCtrl_prev;
reg  ShiftSrc_prev;

reg [2:0] ALUCtrl_expected_prev;
reg  ALUOutCtrl_expected_prev;
reg [1:0] ALUSrcA_expected_prev;
reg [1:0] ALUSrcB_expected_prev;
reg [3:0] DataSrc_expected_prev;
reg  EPCCtrl_expected_prev;
reg [1:0] ExcptCtrl_expected_prev;
reg  HILOWrite_expected_prev;
reg  IRWrite_expected_prev;
reg [1:0] IorD_expected_prev;
reg [1:0] LSCtrl_expected_prev;
reg  MDCtrl_expected_prev;
reg  MemCtrl_expected_prev;
reg  PCCtrl_expected_prev;
reg [2:0] PCSrc_expected_prev;
reg [1:0] RegDst_expected_prev;
reg  RegWrite_expected_prev;
reg  SECtrl_expected_prev;
reg [1:0] SSCtrl_expected_prev;
reg  ShiftAmt_expected_prev;
reg [2:0] ShiftCtrl_expected_prev;
reg  ShiftSrc_expected_prev;

reg [2:0] last_ALUCtrl_exp;
reg  last_ALUOutCtrl_exp;
reg [1:0] last_ALUSrcA_exp;
reg [1:0] last_ALUSrcB_exp;
reg [3:0] last_DataSrc_exp;
reg  last_EPCCtrl_exp;
reg [1:0] last_ExcptCtrl_exp;
reg  last_HILOWrite_exp;
reg  last_IRWrite_exp;
reg [1:0] last_IorD_exp;
reg [1:0] last_LSCtrl_exp;
reg  last_MDCtrl_exp;
reg  last_MemCtrl_exp;
reg  last_PCCtrl_exp;
reg [2:0] last_PCSrc_exp;
reg [1:0] last_RegDst_exp;
reg  last_RegWrite_exp;
reg  last_SECtrl_exp;
reg [1:0] last_SSCtrl_exp;
reg  last_ShiftAmt_exp;
reg [2:0] last_ShiftCtrl_exp;
reg  last_ShiftSrc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUCtrl_prev = ALUCtrl;
	ALUOutCtrl_prev = ALUOutCtrl;
	ALUSrcA_prev = ALUSrcA;
	ALUSrcB_prev = ALUSrcB;
	DataSrc_prev = DataSrc;
	EPCCtrl_prev = EPCCtrl;
	ExcptCtrl_prev = ExcptCtrl;
	HILOWrite_prev = HILOWrite;
	IRWrite_prev = IRWrite;
	IorD_prev = IorD;
	LSCtrl_prev = LSCtrl;
	MDCtrl_prev = MDCtrl;
	MemCtrl_prev = MemCtrl;
	PCCtrl_prev = PCCtrl;
	PCSrc_prev = PCSrc;
	RegDst_prev = RegDst;
	RegWrite_prev = RegWrite;
	SECtrl_prev = SECtrl;
	SSCtrl_prev = SSCtrl;
	ShiftAmt_prev = ShiftAmt;
	ShiftCtrl_prev = ShiftCtrl;
	ShiftSrc_prev = ShiftSrc;
end

// update expected /o prevs

always @(trigger)
begin
	ALUCtrl_expected_prev = ALUCtrl_expected;
	ALUOutCtrl_expected_prev = ALUOutCtrl_expected;
	ALUSrcA_expected_prev = ALUSrcA_expected;
	ALUSrcB_expected_prev = ALUSrcB_expected;
	DataSrc_expected_prev = DataSrc_expected;
	EPCCtrl_expected_prev = EPCCtrl_expected;
	ExcptCtrl_expected_prev = ExcptCtrl_expected;
	HILOWrite_expected_prev = HILOWrite_expected;
	IRWrite_expected_prev = IRWrite_expected;
	IorD_expected_prev = IorD_expected;
	LSCtrl_expected_prev = LSCtrl_expected;
	MDCtrl_expected_prev = MDCtrl_expected;
	MemCtrl_expected_prev = MemCtrl_expected;
	PCCtrl_expected_prev = PCCtrl_expected;
	PCSrc_expected_prev = PCSrc_expected;
	RegDst_expected_prev = RegDst_expected;
	RegWrite_expected_prev = RegWrite_expected;
	SECtrl_expected_prev = SECtrl_expected;
	SSCtrl_expected_prev = SSCtrl_expected;
	ShiftAmt_expected_prev = ShiftAmt_expected;
	ShiftCtrl_expected_prev = ShiftCtrl_expected;
	ShiftSrc_expected_prev = ShiftSrc_expected;
end


// expected ALUCtrl[ 2 ]
initial
begin
	ALUCtrl_expected[2] = 1'bX;
end 
// expected ALUCtrl[ 1 ]
initial
begin
	ALUCtrl_expected[1] = 1'bX;
end 
// expected ALUCtrl[ 0 ]
initial
begin
	ALUCtrl_expected[0] = 1'bX;
end 

// expected ALUOutCtrl
initial
begin
	ALUOutCtrl_expected = 1'bX;
end 
// expected ALUSrcA[ 1 ]
initial
begin
	ALUSrcA_expected[1] = 1'bX;
end 
// expected ALUSrcA[ 0 ]
initial
begin
	ALUSrcA_expected[0] = 1'bX;
end 
// expected ALUSrcB[ 1 ]
initial
begin
	ALUSrcB_expected[1] = 1'bX;
end 
// expected ALUSrcB[ 0 ]
initial
begin
	ALUSrcB_expected[0] = 1'bX;
end 
// expected DataSrc[ 3 ]
initial
begin
	DataSrc_expected[3] = 1'bX;
end 
// expected DataSrc[ 2 ]
initial
begin
	DataSrc_expected[2] = 1'bX;
end 
// expected DataSrc[ 1 ]
initial
begin
	DataSrc_expected[1] = 1'bX;
end 
// expected DataSrc[ 0 ]
initial
begin
	DataSrc_expected[0] = 1'bX;
end 

// expected EPCCtrl
initial
begin
	EPCCtrl_expected = 1'bX;
end 
// expected ExcptCtrl[ 1 ]
initial
begin
	ExcptCtrl_expected[1] = 1'bX;
end 
// expected ExcptCtrl[ 0 ]
initial
begin
	ExcptCtrl_expected[0] = 1'bX;
end 

// expected HILOWrite
initial
begin
	HILOWrite_expected = 1'bX;
end 

// expected IRWrite
initial
begin
	IRWrite_expected = 1'bX;
end 
// expected IorD[ 1 ]
initial
begin
	IorD_expected[1] = 1'bX;
end 
// expected IorD[ 0 ]
initial
begin
	IorD_expected[0] = 1'bX;
end 
// expected LSCtrl[ 1 ]
initial
begin
	LSCtrl_expected[1] = 1'bX;
end 
// expected LSCtrl[ 0 ]
initial
begin
	LSCtrl_expected[0] = 1'bX;
end 

// expected MDCtrl
initial
begin
	MDCtrl_expected = 1'bX;
end 

// expected MemCtrl
initial
begin
	MemCtrl_expected = 1'bX;
end 

// expected PCCtrl
initial
begin
	PCCtrl_expected = 1'bX;
end 
// expected PCSrc[ 2 ]
initial
begin
	PCSrc_expected[2] = 1'bX;
end 
// expected PCSrc[ 1 ]
initial
begin
	PCSrc_expected[1] = 1'bX;
end 
// expected PCSrc[ 0 ]
initial
begin
	PCSrc_expected[0] = 1'bX;
end 
// expected RegDst[ 1 ]
initial
begin
	RegDst_expected[1] = 1'bX;
end 
// expected RegDst[ 0 ]
initial
begin
	RegDst_expected[0] = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 

// expected SECtrl
initial
begin
	SECtrl_expected = 1'bX;
end 
// expected SSCtrl[ 1 ]
initial
begin
	SSCtrl_expected[1] = 1'bX;
end 
// expected SSCtrl[ 0 ]
initial
begin
	SSCtrl_expected[0] = 1'bX;
end 

// expected ShiftAmt
initial
begin
	ShiftAmt_expected = 1'bX;
end 
// expected ShiftCtrl[ 2 ]
initial
begin
	ShiftCtrl_expected[2] = 1'bX;
end 
// expected ShiftCtrl[ 1 ]
initial
begin
	ShiftCtrl_expected[1] = 1'bX;
end 
// expected ShiftCtrl[ 0 ]
initial
begin
	ShiftCtrl_expected[0] = 1'bX;
end 

// expected ShiftSrc
initial
begin
	ShiftSrc_expected = 1'bX;
end 
// generate trigger
always @(ALUCtrl_expected or ALUCtrl or ALUOutCtrl_expected or ALUOutCtrl or ALUSrcA_expected or ALUSrcA or ALUSrcB_expected or ALUSrcB or DataSrc_expected or DataSrc or EPCCtrl_expected or EPCCtrl or ExcptCtrl_expected or ExcptCtrl or HILOWrite_expected or HILOWrite or IRWrite_expected or IRWrite or IorD_expected or IorD or LSCtrl_expected or LSCtrl or MDCtrl_expected or MDCtrl or MemCtrl_expected or MemCtrl or PCCtrl_expected or PCCtrl or PCSrc_expected or PCSrc or RegDst_expected or RegDst or RegWrite_expected or RegWrite or SECtrl_expected or SECtrl or SSCtrl_expected or SSCtrl or ShiftAmt_expected or ShiftAmt or ShiftCtrl_expected or ShiftCtrl or ShiftSrc_expected or ShiftSrc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUCtrl = %b | expected ALUOutCtrl = %b | expected ALUSrcA = %b | expected ALUSrcB = %b | expected DataSrc = %b | expected EPCCtrl = %b | expected ExcptCtrl = %b | expected HILOWrite = %b | expected IRWrite = %b | expected IorD = %b | expected LSCtrl = %b | expected MDCtrl = %b | expected MemCtrl = %b | expected PCCtrl = %b | expected PCSrc = %b | expected RegDst = %b | expected RegWrite = %b | expected SECtrl = %b | expected SSCtrl = %b | expected ShiftAmt = %b | expected ShiftCtrl = %b | expected ShiftSrc = %b | ",ALUCtrl_expected_prev,ALUOutCtrl_expected_prev,ALUSrcA_expected_prev,ALUSrcB_expected_prev,DataSrc_expected_prev,EPCCtrl_expected_prev,ExcptCtrl_expected_prev,HILOWrite_expected_prev,IRWrite_expected_prev,IorD_expected_prev,LSCtrl_expected_prev,MDCtrl_expected_prev,MemCtrl_expected_prev,PCCtrl_expected_prev,PCSrc_expected_prev,RegDst_expected_prev,RegWrite_expected_prev,SECtrl_expected_prev,SSCtrl_expected_prev,ShiftAmt_expected_prev,ShiftCtrl_expected_prev,ShiftSrc_expected_prev);
	$display("| real ALUCtrl = %b | real ALUOutCtrl = %b | real ALUSrcA = %b | real ALUSrcB = %b | real DataSrc = %b | real EPCCtrl = %b | real ExcptCtrl = %b | real HILOWrite = %b | real IRWrite = %b | real IorD = %b | real LSCtrl = %b | real MDCtrl = %b | real MemCtrl = %b | real PCCtrl = %b | real PCSrc = %b | real RegDst = %b | real RegWrite = %b | real SECtrl = %b | real SSCtrl = %b | real ShiftAmt = %b | real ShiftCtrl = %b | real ShiftSrc = %b | ",ALUCtrl_prev,ALUOutCtrl_prev,ALUSrcA_prev,ALUSrcB_prev,DataSrc_prev,EPCCtrl_prev,ExcptCtrl_prev,HILOWrite_prev,IRWrite_prev,IorD_prev,LSCtrl_prev,MDCtrl_prev,MemCtrl_prev,PCCtrl_prev,PCSrc_prev,RegDst_prev,RegWrite_prev,SECtrl_prev,SSCtrl_prev,ShiftAmt_prev,ShiftCtrl_prev,ShiftSrc_prev);
`endif
	if (
		( ALUCtrl_expected_prev[0] !== 1'bx ) && ( ALUCtrl_prev[0] !== ALUCtrl_expected_prev[0] )
		&& ((ALUCtrl_expected_prev[0] !== last_ALUCtrl_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCtrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCtrl_expected_prev);
		$display ("     Real value = %b", ALUCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCtrl_exp[0] = ALUCtrl_expected_prev[0];
	end
	if (
		( ALUCtrl_expected_prev[1] !== 1'bx ) && ( ALUCtrl_prev[1] !== ALUCtrl_expected_prev[1] )
		&& ((ALUCtrl_expected_prev[1] !== last_ALUCtrl_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCtrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCtrl_expected_prev);
		$display ("     Real value = %b", ALUCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCtrl_exp[1] = ALUCtrl_expected_prev[1];
	end
	if (
		( ALUCtrl_expected_prev[2] !== 1'bx ) && ( ALUCtrl_prev[2] !== ALUCtrl_expected_prev[2] )
		&& ((ALUCtrl_expected_prev[2] !== last_ALUCtrl_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCtrl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCtrl_expected_prev);
		$display ("     Real value = %b", ALUCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUCtrl_exp[2] = ALUCtrl_expected_prev[2];
	end
	if (
		( ALUOutCtrl_expected_prev !== 1'bx ) && ( ALUOutCtrl_prev !== ALUOutCtrl_expected_prev )
		&& ((ALUOutCtrl_expected_prev !== last_ALUOutCtrl_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOutCtrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOutCtrl_expected_prev);
		$display ("     Real value = %b", ALUOutCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOutCtrl_exp = ALUOutCtrl_expected_prev;
	end
	if (
		( ALUSrcA_expected_prev[0] !== 1'bx ) && ( ALUSrcA_prev[0] !== ALUSrcA_expected_prev[0] )
		&& ((ALUSrcA_expected_prev[0] !== last_ALUSrcA_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcA_expected_prev);
		$display ("     Real value = %b", ALUSrcA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUSrcA_exp[0] = ALUSrcA_expected_prev[0];
	end
	if (
		( ALUSrcA_expected_prev[1] !== 1'bx ) && ( ALUSrcA_prev[1] !== ALUSrcA_expected_prev[1] )
		&& ((ALUSrcA_expected_prev[1] !== last_ALUSrcA_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcA_expected_prev);
		$display ("     Real value = %b", ALUSrcA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUSrcA_exp[1] = ALUSrcA_expected_prev[1];
	end
	if (
		( ALUSrcB_expected_prev[0] !== 1'bx ) && ( ALUSrcB_prev[0] !== ALUSrcB_expected_prev[0] )
		&& ((ALUSrcB_expected_prev[0] !== last_ALUSrcB_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALUSrcB_exp[0] = ALUSrcB_expected_prev[0];
	end
	if (
		( ALUSrcB_expected_prev[1] !== 1'bx ) && ( ALUSrcB_prev[1] !== ALUSrcB_expected_prev[1] )
		&& ((ALUSrcB_expected_prev[1] !== last_ALUSrcB_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALUSrcB_exp[1] = ALUSrcB_expected_prev[1];
	end
	if (
		( DataSrc_expected_prev[0] !== 1'bx ) && ( DataSrc_prev[0] !== DataSrc_expected_prev[0] )
		&& ((DataSrc_expected_prev[0] !== last_DataSrc_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataSrc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataSrc_expected_prev);
		$display ("     Real value = %b", DataSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataSrc_exp[0] = DataSrc_expected_prev[0];
	end
	if (
		( DataSrc_expected_prev[1] !== 1'bx ) && ( DataSrc_prev[1] !== DataSrc_expected_prev[1] )
		&& ((DataSrc_expected_prev[1] !== last_DataSrc_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataSrc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataSrc_expected_prev);
		$display ("     Real value = %b", DataSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataSrc_exp[1] = DataSrc_expected_prev[1];
	end
	if (
		( DataSrc_expected_prev[2] !== 1'bx ) && ( DataSrc_prev[2] !== DataSrc_expected_prev[2] )
		&& ((DataSrc_expected_prev[2] !== last_DataSrc_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataSrc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataSrc_expected_prev);
		$display ("     Real value = %b", DataSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataSrc_exp[2] = DataSrc_expected_prev[2];
	end
	if (
		( DataSrc_expected_prev[3] !== 1'bx ) && ( DataSrc_prev[3] !== DataSrc_expected_prev[3] )
		&& ((DataSrc_expected_prev[3] !== last_DataSrc_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataSrc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataSrc_expected_prev);
		$display ("     Real value = %b", DataSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataSrc_exp[3] = DataSrc_expected_prev[3];
	end
	if (
		( EPCCtrl_expected_prev !== 1'bx ) && ( EPCCtrl_prev !== EPCCtrl_expected_prev )
		&& ((EPCCtrl_expected_prev !== last_EPCCtrl_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPCCtrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPCCtrl_expected_prev);
		$display ("     Real value = %b", EPCCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EPCCtrl_exp = EPCCtrl_expected_prev;
	end
	if (
		( ExcptCtrl_expected_prev[0] !== 1'bx ) && ( ExcptCtrl_prev[0] !== ExcptCtrl_expected_prev[0] )
		&& ((ExcptCtrl_expected_prev[0] !== last_ExcptCtrl_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExcptCtrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExcptCtrl_expected_prev);
		$display ("     Real value = %b", ExcptCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ExcptCtrl_exp[0] = ExcptCtrl_expected_prev[0];
	end
	if (
		( ExcptCtrl_expected_prev[1] !== 1'bx ) && ( ExcptCtrl_prev[1] !== ExcptCtrl_expected_prev[1] )
		&& ((ExcptCtrl_expected_prev[1] !== last_ExcptCtrl_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ExcptCtrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ExcptCtrl_expected_prev);
		$display ("     Real value = %b", ExcptCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ExcptCtrl_exp[1] = ExcptCtrl_expected_prev[1];
	end
	if (
		( HILOWrite_expected_prev !== 1'bx ) && ( HILOWrite_prev !== HILOWrite_expected_prev )
		&& ((HILOWrite_expected_prev !== last_HILOWrite_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HILOWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HILOWrite_expected_prev);
		$display ("     Real value = %b", HILOWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HILOWrite_exp = HILOWrite_expected_prev;
	end
	if (
		( IRWrite_expected_prev !== 1'bx ) && ( IRWrite_prev !== IRWrite_expected_prev )
		&& ((IRWrite_expected_prev !== last_IRWrite_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRWrite_expected_prev);
		$display ("     Real value = %b", IRWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IRWrite_exp = IRWrite_expected_prev;
	end
	if (
		( IorD_expected_prev[0] !== 1'bx ) && ( IorD_prev[0] !== IorD_expected_prev[0] )
		&& ((IorD_expected_prev[0] !== last_IorD_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IorD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IorD_expected_prev);
		$display ("     Real value = %b", IorD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IorD_exp[0] = IorD_expected_prev[0];
	end
	if (
		( IorD_expected_prev[1] !== 1'bx ) && ( IorD_prev[1] !== IorD_expected_prev[1] )
		&& ((IorD_expected_prev[1] !== last_IorD_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IorD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IorD_expected_prev);
		$display ("     Real value = %b", IorD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IorD_exp[1] = IorD_expected_prev[1];
	end
	if (
		( LSCtrl_expected_prev[0] !== 1'bx ) && ( LSCtrl_prev[0] !== LSCtrl_expected_prev[0] )
		&& ((LSCtrl_expected_prev[0] !== last_LSCtrl_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSCtrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSCtrl_expected_prev);
		$display ("     Real value = %b", LSCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LSCtrl_exp[0] = LSCtrl_expected_prev[0];
	end
	if (
		( LSCtrl_expected_prev[1] !== 1'bx ) && ( LSCtrl_prev[1] !== LSCtrl_expected_prev[1] )
		&& ((LSCtrl_expected_prev[1] !== last_LSCtrl_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSCtrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSCtrl_expected_prev);
		$display ("     Real value = %b", LSCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LSCtrl_exp[1] = LSCtrl_expected_prev[1];
	end
	if (
		( MDCtrl_expected_prev !== 1'bx ) && ( MDCtrl_prev !== MDCtrl_expected_prev )
		&& ((MDCtrl_expected_prev !== last_MDCtrl_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDCtrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDCtrl_expected_prev);
		$display ("     Real value = %b", MDCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MDCtrl_exp = MDCtrl_expected_prev;
	end
	if (
		( MemCtrl_expected_prev !== 1'bx ) && ( MemCtrl_prev !== MemCtrl_expected_prev )
		&& ((MemCtrl_expected_prev !== last_MemCtrl_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemCtrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemCtrl_expected_prev);
		$display ("     Real value = %b", MemCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_MemCtrl_exp = MemCtrl_expected_prev;
	end
	if (
		( PCCtrl_expected_prev !== 1'bx ) && ( PCCtrl_prev !== PCCtrl_expected_prev )
		&& ((PCCtrl_expected_prev !== last_PCCtrl_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCCtrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCCtrl_expected_prev);
		$display ("     Real value = %b", PCCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PCCtrl_exp = PCCtrl_expected_prev;
	end
	if (
		( PCSrc_expected_prev[0] !== 1'bx ) && ( PCSrc_prev[0] !== PCSrc_expected_prev[0] )
		&& ((PCSrc_expected_prev[0] !== last_PCSrc_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSrc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSrc_expected_prev);
		$display ("     Real value = %b", PCSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PCSrc_exp[0] = PCSrc_expected_prev[0];
	end
	if (
		( PCSrc_expected_prev[1] !== 1'bx ) && ( PCSrc_prev[1] !== PCSrc_expected_prev[1] )
		&& ((PCSrc_expected_prev[1] !== last_PCSrc_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSrc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSrc_expected_prev);
		$display ("     Real value = %b", PCSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PCSrc_exp[1] = PCSrc_expected_prev[1];
	end
	if (
		( PCSrc_expected_prev[2] !== 1'bx ) && ( PCSrc_prev[2] !== PCSrc_expected_prev[2] )
		&& ((PCSrc_expected_prev[2] !== last_PCSrc_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSrc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSrc_expected_prev);
		$display ("     Real value = %b", PCSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PCSrc_exp[2] = PCSrc_expected_prev[2];
	end
	if (
		( RegDst_expected_prev[0] !== 1'bx ) && ( RegDst_prev[0] !== RegDst_expected_prev[0] )
		&& ((RegDst_expected_prev[0] !== last_RegDst_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RegDst_exp[0] = RegDst_expected_prev[0];
	end
	if (
		( RegDst_expected_prev[1] !== 1'bx ) && ( RegDst_prev[1] !== RegDst_expected_prev[1] )
		&& ((RegDst_expected_prev[1] !== last_RegDst_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RegDst_exp[1] = RegDst_expected_prev[1];
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end
	if (
		( SECtrl_expected_prev !== 1'bx ) && ( SECtrl_prev !== SECtrl_expected_prev )
		&& ((SECtrl_expected_prev !== last_SECtrl_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SECtrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SECtrl_expected_prev);
		$display ("     Real value = %b", SECtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SECtrl_exp = SECtrl_expected_prev;
	end
	if (
		( SSCtrl_expected_prev[0] !== 1'bx ) && ( SSCtrl_prev[0] !== SSCtrl_expected_prev[0] )
		&& ((SSCtrl_expected_prev[0] !== last_SSCtrl_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SSCtrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SSCtrl_expected_prev);
		$display ("     Real value = %b", SSCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SSCtrl_exp[0] = SSCtrl_expected_prev[0];
	end
	if (
		( SSCtrl_expected_prev[1] !== 1'bx ) && ( SSCtrl_prev[1] !== SSCtrl_expected_prev[1] )
		&& ((SSCtrl_expected_prev[1] !== last_SSCtrl_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SSCtrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SSCtrl_expected_prev);
		$display ("     Real value = %b", SSCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_SSCtrl_exp[1] = SSCtrl_expected_prev[1];
	end
	if (
		( ShiftAmt_expected_prev !== 1'bx ) && ( ShiftAmt_prev !== ShiftAmt_expected_prev )
		&& ((ShiftAmt_expected_prev !== last_ShiftAmt_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ShiftAmt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ShiftAmt_expected_prev);
		$display ("     Real value = %b", ShiftAmt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_ShiftAmt_exp = ShiftAmt_expected_prev;
	end
	if (
		( ShiftCtrl_expected_prev[0] !== 1'bx ) && ( ShiftCtrl_prev[0] !== ShiftCtrl_expected_prev[0] )
		&& ((ShiftCtrl_expected_prev[0] !== last_ShiftCtrl_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ShiftCtrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ShiftCtrl_expected_prev);
		$display ("     Real value = %b", ShiftCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ShiftCtrl_exp[0] = ShiftCtrl_expected_prev[0];
	end
	if (
		( ShiftCtrl_expected_prev[1] !== 1'bx ) && ( ShiftCtrl_prev[1] !== ShiftCtrl_expected_prev[1] )
		&& ((ShiftCtrl_expected_prev[1] !== last_ShiftCtrl_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ShiftCtrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ShiftCtrl_expected_prev);
		$display ("     Real value = %b", ShiftCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ShiftCtrl_exp[1] = ShiftCtrl_expected_prev[1];
	end
	if (
		( ShiftCtrl_expected_prev[2] !== 1'bx ) && ( ShiftCtrl_prev[2] !== ShiftCtrl_expected_prev[2] )
		&& ((ShiftCtrl_expected_prev[2] !== last_ShiftCtrl_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ShiftCtrl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ShiftCtrl_expected_prev);
		$display ("     Real value = %b", ShiftCtrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ShiftCtrl_exp[2] = ShiftCtrl_expected_prev[2];
	end
	if (
		( ShiftSrc_expected_prev !== 1'bx ) && ( ShiftSrc_prev !== ShiftSrc_expected_prev )
		&& ((ShiftSrc_expected_prev !== last_ShiftSrc_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ShiftSrc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ShiftSrc_expected_prev);
		$display ("     Real value = %b", ShiftSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_ShiftSrc_exp = ShiftSrc_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module uControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg div0;
reg eqf;
reg [5:0] funct;
reg gtf;
reg [5:0] opCode;
reg ov;
reg reset;
// wires                                               
wire [2:0] ALUCtrl;
wire ALUOutCtrl;
wire [1:0] ALUSrcA;
wire [1:0] ALUSrcB;
wire [3:0] DataSrc;
wire EPCCtrl;
wire [1:0] ExcptCtrl;
wire HILOWrite;
wire IRWrite;
wire [1:0] IorD;
wire [1:0] LSCtrl;
wire MDCtrl;
wire MemCtrl;
wire PCCtrl;
wire [2:0] PCSrc;
wire [1:0] RegDst;
wire RegWrite;
wire SECtrl;
wire [1:0] SSCtrl;
wire ShiftAmt;
wire [2:0] ShiftCtrl;
wire ShiftSrc;

wire sampler;                             

// assign statements (if any)                          
uControl i1 (
// port map - connection between master ports and signals/registers   
	.ALUCtrl(ALUCtrl),
	.ALUOutCtrl(ALUOutCtrl),
	.ALUSrcA(ALUSrcA),
	.ALUSrcB(ALUSrcB),
	.DataSrc(DataSrc),
	.EPCCtrl(EPCCtrl),
	.ExcptCtrl(ExcptCtrl),
	.HILOWrite(HILOWrite),
	.IRWrite(IRWrite),
	.IorD(IorD),
	.LSCtrl(LSCtrl),
	.MDCtrl(MDCtrl),
	.MemCtrl(MemCtrl),
	.PCCtrl(PCCtrl),
	.PCSrc(PCSrc),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.SECtrl(SECtrl),
	.SSCtrl(SSCtrl),
	.ShiftAmt(ShiftAmt),
	.ShiftCtrl(ShiftCtrl),
	.ShiftSrc(ShiftSrc),
	.clk(clk),
	.div0(div0),
	.eqf(eqf),
	.funct(funct),
	.gtf(gtf),
	.opCode(opCode),
	.ov(ov),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// div0
initial
begin
	div0 = 1'b0;
end 

// eqf
initial
begin
	eqf = 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b0;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
end 

// gtf
initial
begin
	gtf = 1'b0;
end 
// opCode[ 5 ]
initial
begin
	opCode[5] = 1'b0;
end 
// opCode[ 4 ]
initial
begin
	opCode[4] = 1'b0;
end 
// opCode[ 3 ]
initial
begin
	opCode[3] = 1'b0;
end 
// opCode[ 2 ]
initial
begin
	opCode[2] = 1'b0;
end 
// opCode[ 1 ]
initial
begin
	opCode[1] = 1'b0;
end 
// opCode[ 0 ]
initial
begin
	opCode[0] = 1'b0;
end 

// ov
initial
begin
	ov = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

uControl_vlg_sample_tst tb_sample (
	.clk(clk),
	.div0(div0),
	.eqf(eqf),
	.funct(funct),
	.gtf(gtf),
	.opCode(opCode),
	.ov(ov),
	.reset(reset),
	.sampler_tx(sampler)
);

uControl_vlg_check_tst tb_out(
	.ALUCtrl(ALUCtrl),
	.ALUOutCtrl(ALUOutCtrl),
	.ALUSrcA(ALUSrcA),
	.ALUSrcB(ALUSrcB),
	.DataSrc(DataSrc),
	.EPCCtrl(EPCCtrl),
	.ExcptCtrl(ExcptCtrl),
	.HILOWrite(HILOWrite),
	.IRWrite(IRWrite),
	.IorD(IorD),
	.LSCtrl(LSCtrl),
	.MDCtrl(MDCtrl),
	.MemCtrl(MemCtrl),
	.PCCtrl(PCCtrl),
	.PCSrc(PCSrc),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.SECtrl(SECtrl),
	.SSCtrl(SSCtrl),
	.ShiftAmt(ShiftAmt),
	.ShiftCtrl(ShiftCtrl),
	.ShiftSrc(ShiftSrc),
	.sampler_rx(sampler)
);
endmodule


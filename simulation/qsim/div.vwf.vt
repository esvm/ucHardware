// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2017 03:04:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Div
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Div_vlg_sample_tst(
	A,
	B,
	clk,
	reset,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Div_vlg_check_tst (
	HI,
	LO,
	counter,
	div0,
	sampler_rx
);
input [31:0] HI;
input [31:0] LO;
input [5:0] counter;
input  div0;
input sampler_rx;

reg [31:0] HI_expected;
reg [31:0] LO_expected;
reg [5:0] counter_expected;
reg  div0_expected;

reg [31:0] HI_prev;
reg [31:0] LO_prev;
reg [5:0] counter_prev;
reg  div0_prev;

reg [31:0] HI_expected_prev;
reg [31:0] LO_expected_prev;
reg [5:0] counter_expected_prev;
reg  div0_expected_prev;

reg [31:0] last_HI_exp;
reg [31:0] last_LO_exp;
reg [5:0] last_counter_exp;
reg  last_div0_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	HI_prev = HI;
	LO_prev = LO;
	counter_prev = counter;
	div0_prev = div0;
end

// update expected /o prevs

always @(trigger)
begin
	HI_expected_prev = HI_expected;
	LO_expected_prev = LO_expected;
	counter_expected_prev = counter_expected;
	div0_expected_prev = div0_expected;
end


// expected HI[ 31 ]
initial
begin
	HI_expected[31] = 1'bX;
end 
// expected HI[ 30 ]
initial
begin
	HI_expected[30] = 1'bX;
end 
// expected HI[ 29 ]
initial
begin
	HI_expected[29] = 1'bX;
end 
// expected HI[ 28 ]
initial
begin
	HI_expected[28] = 1'bX;
end 
// expected HI[ 27 ]
initial
begin
	HI_expected[27] = 1'bX;
end 
// expected HI[ 26 ]
initial
begin
	HI_expected[26] = 1'bX;
end 
// expected HI[ 25 ]
initial
begin
	HI_expected[25] = 1'bX;
end 
// expected HI[ 24 ]
initial
begin
	HI_expected[24] = 1'bX;
end 
// expected HI[ 23 ]
initial
begin
	HI_expected[23] = 1'bX;
end 
// expected HI[ 22 ]
initial
begin
	HI_expected[22] = 1'bX;
end 
// expected HI[ 21 ]
initial
begin
	HI_expected[21] = 1'bX;
end 
// expected HI[ 20 ]
initial
begin
	HI_expected[20] = 1'bX;
end 
// expected HI[ 19 ]
initial
begin
	HI_expected[19] = 1'bX;
end 
// expected HI[ 18 ]
initial
begin
	HI_expected[18] = 1'bX;
end 
// expected HI[ 17 ]
initial
begin
	HI_expected[17] = 1'bX;
end 
// expected HI[ 16 ]
initial
begin
	HI_expected[16] = 1'bX;
end 
// expected HI[ 15 ]
initial
begin
	HI_expected[15] = 1'bX;
end 
// expected HI[ 14 ]
initial
begin
	HI_expected[14] = 1'bX;
end 
// expected HI[ 13 ]
initial
begin
	HI_expected[13] = 1'bX;
end 
// expected HI[ 12 ]
initial
begin
	HI_expected[12] = 1'bX;
end 
// expected HI[ 11 ]
initial
begin
	HI_expected[11] = 1'bX;
end 
// expected HI[ 10 ]
initial
begin
	HI_expected[10] = 1'bX;
end 
// expected HI[ 9 ]
initial
begin
	HI_expected[9] = 1'bX;
end 
// expected HI[ 8 ]
initial
begin
	HI_expected[8] = 1'bX;
end 
// expected HI[ 7 ]
initial
begin
	HI_expected[7] = 1'bX;
end 
// expected HI[ 6 ]
initial
begin
	HI_expected[6] = 1'bX;
end 
// expected HI[ 5 ]
initial
begin
	HI_expected[5] = 1'bX;
end 
// expected HI[ 4 ]
initial
begin
	HI_expected[4] = 1'bX;
end 
// expected HI[ 3 ]
initial
begin
	HI_expected[3] = 1'bX;
end 
// expected HI[ 2 ]
initial
begin
	HI_expected[2] = 1'bX;
end 
// expected HI[ 1 ]
initial
begin
	HI_expected[1] = 1'bX;
end 
// expected HI[ 0 ]
initial
begin
	HI_expected[0] = 1'bX;
end 
// expected LO[ 31 ]
initial
begin
	LO_expected[31] = 1'bX;
end 
// expected LO[ 30 ]
initial
begin
	LO_expected[30] = 1'bX;
end 
// expected LO[ 29 ]
initial
begin
	LO_expected[29] = 1'bX;
end 
// expected LO[ 28 ]
initial
begin
	LO_expected[28] = 1'bX;
end 
// expected LO[ 27 ]
initial
begin
	LO_expected[27] = 1'bX;
end 
// expected LO[ 26 ]
initial
begin
	LO_expected[26] = 1'bX;
end 
// expected LO[ 25 ]
initial
begin
	LO_expected[25] = 1'bX;
end 
// expected LO[ 24 ]
initial
begin
	LO_expected[24] = 1'bX;
end 
// expected LO[ 23 ]
initial
begin
	LO_expected[23] = 1'bX;
end 
// expected LO[ 22 ]
initial
begin
	LO_expected[22] = 1'bX;
end 
// expected LO[ 21 ]
initial
begin
	LO_expected[21] = 1'bX;
end 
// expected LO[ 20 ]
initial
begin
	LO_expected[20] = 1'bX;
end 
// expected LO[ 19 ]
initial
begin
	LO_expected[19] = 1'bX;
end 
// expected LO[ 18 ]
initial
begin
	LO_expected[18] = 1'bX;
end 
// expected LO[ 17 ]
initial
begin
	LO_expected[17] = 1'bX;
end 
// expected LO[ 16 ]
initial
begin
	LO_expected[16] = 1'bX;
end 
// expected LO[ 15 ]
initial
begin
	LO_expected[15] = 1'bX;
end 
// expected LO[ 14 ]
initial
begin
	LO_expected[14] = 1'bX;
end 
// expected LO[ 13 ]
initial
begin
	LO_expected[13] = 1'bX;
end 
// expected LO[ 12 ]
initial
begin
	LO_expected[12] = 1'bX;
end 
// expected LO[ 11 ]
initial
begin
	LO_expected[11] = 1'bX;
end 
// expected LO[ 10 ]
initial
begin
	LO_expected[10] = 1'bX;
end 
// expected LO[ 9 ]
initial
begin
	LO_expected[9] = 1'bX;
end 
// expected LO[ 8 ]
initial
begin
	LO_expected[8] = 1'bX;
end 
// expected LO[ 7 ]
initial
begin
	LO_expected[7] = 1'bX;
end 
// expected LO[ 6 ]
initial
begin
	LO_expected[6] = 1'bX;
end 
// expected LO[ 5 ]
initial
begin
	LO_expected[5] = 1'bX;
end 
// expected LO[ 4 ]
initial
begin
	LO_expected[4] = 1'bX;
end 
// expected LO[ 3 ]
initial
begin
	LO_expected[3] = 1'bX;
end 
// expected LO[ 2 ]
initial
begin
	LO_expected[2] = 1'bX;
end 
// expected LO[ 1 ]
initial
begin
	LO_expected[1] = 1'bX;
end 
// expected LO[ 0 ]
initial
begin
	LO_expected[0] = 1'bX;
end 

// expected div0
initial
begin
	div0_expected = 1'bX;
end 
// expected counter[ 5 ]
initial
begin
	counter_expected[5] = 1'bX;
end 
// expected counter[ 4 ]
initial
begin
	counter_expected[4] = 1'bX;
end 
// expected counter[ 3 ]
initial
begin
	counter_expected[3] = 1'bX;
end 
// expected counter[ 2 ]
initial
begin
	counter_expected[2] = 1'bX;
end 
// expected counter[ 1 ]
initial
begin
	counter_expected[1] = 1'bX;
end 
// expected counter[ 0 ]
initial
begin
	counter_expected[0] = 1'bX;
end 
// generate trigger
always @(HI_expected or HI or LO_expected or LO or counter_expected or counter or div0_expected or div0)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HI = %b | expected LO = %b | expected counter = %b | expected div0 = %b | ",HI_expected_prev,LO_expected_prev,counter_expected_prev,div0_expected_prev);
	$display("| real HI = %b | real LO = %b | real counter = %b | real div0 = %b | ",HI_prev,LO_prev,counter_prev,div0_prev);
`endif
	if (
		( HI_expected_prev[0] !== 1'bx ) && ( HI_prev[0] !== HI_expected_prev[0] )
		&& ((HI_expected_prev[0] !== last_HI_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[0] = HI_expected_prev[0];
	end
	if (
		( HI_expected_prev[1] !== 1'bx ) && ( HI_prev[1] !== HI_expected_prev[1] )
		&& ((HI_expected_prev[1] !== last_HI_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[1] = HI_expected_prev[1];
	end
	if (
		( HI_expected_prev[2] !== 1'bx ) && ( HI_prev[2] !== HI_expected_prev[2] )
		&& ((HI_expected_prev[2] !== last_HI_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[2] = HI_expected_prev[2];
	end
	if (
		( HI_expected_prev[3] !== 1'bx ) && ( HI_prev[3] !== HI_expected_prev[3] )
		&& ((HI_expected_prev[3] !== last_HI_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[3] = HI_expected_prev[3];
	end
	if (
		( HI_expected_prev[4] !== 1'bx ) && ( HI_prev[4] !== HI_expected_prev[4] )
		&& ((HI_expected_prev[4] !== last_HI_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[4] = HI_expected_prev[4];
	end
	if (
		( HI_expected_prev[5] !== 1'bx ) && ( HI_prev[5] !== HI_expected_prev[5] )
		&& ((HI_expected_prev[5] !== last_HI_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[5] = HI_expected_prev[5];
	end
	if (
		( HI_expected_prev[6] !== 1'bx ) && ( HI_prev[6] !== HI_expected_prev[6] )
		&& ((HI_expected_prev[6] !== last_HI_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[6] = HI_expected_prev[6];
	end
	if (
		( HI_expected_prev[7] !== 1'bx ) && ( HI_prev[7] !== HI_expected_prev[7] )
		&& ((HI_expected_prev[7] !== last_HI_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[7] = HI_expected_prev[7];
	end
	if (
		( HI_expected_prev[8] !== 1'bx ) && ( HI_prev[8] !== HI_expected_prev[8] )
		&& ((HI_expected_prev[8] !== last_HI_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[8] = HI_expected_prev[8];
	end
	if (
		( HI_expected_prev[9] !== 1'bx ) && ( HI_prev[9] !== HI_expected_prev[9] )
		&& ((HI_expected_prev[9] !== last_HI_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[9] = HI_expected_prev[9];
	end
	if (
		( HI_expected_prev[10] !== 1'bx ) && ( HI_prev[10] !== HI_expected_prev[10] )
		&& ((HI_expected_prev[10] !== last_HI_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[10] = HI_expected_prev[10];
	end
	if (
		( HI_expected_prev[11] !== 1'bx ) && ( HI_prev[11] !== HI_expected_prev[11] )
		&& ((HI_expected_prev[11] !== last_HI_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[11] = HI_expected_prev[11];
	end
	if (
		( HI_expected_prev[12] !== 1'bx ) && ( HI_prev[12] !== HI_expected_prev[12] )
		&& ((HI_expected_prev[12] !== last_HI_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[12] = HI_expected_prev[12];
	end
	if (
		( HI_expected_prev[13] !== 1'bx ) && ( HI_prev[13] !== HI_expected_prev[13] )
		&& ((HI_expected_prev[13] !== last_HI_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[13] = HI_expected_prev[13];
	end
	if (
		( HI_expected_prev[14] !== 1'bx ) && ( HI_prev[14] !== HI_expected_prev[14] )
		&& ((HI_expected_prev[14] !== last_HI_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[14] = HI_expected_prev[14];
	end
	if (
		( HI_expected_prev[15] !== 1'bx ) && ( HI_prev[15] !== HI_expected_prev[15] )
		&& ((HI_expected_prev[15] !== last_HI_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[15] = HI_expected_prev[15];
	end
	if (
		( HI_expected_prev[16] !== 1'bx ) && ( HI_prev[16] !== HI_expected_prev[16] )
		&& ((HI_expected_prev[16] !== last_HI_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[16] = HI_expected_prev[16];
	end
	if (
		( HI_expected_prev[17] !== 1'bx ) && ( HI_prev[17] !== HI_expected_prev[17] )
		&& ((HI_expected_prev[17] !== last_HI_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[17] = HI_expected_prev[17];
	end
	if (
		( HI_expected_prev[18] !== 1'bx ) && ( HI_prev[18] !== HI_expected_prev[18] )
		&& ((HI_expected_prev[18] !== last_HI_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[18] = HI_expected_prev[18];
	end
	if (
		( HI_expected_prev[19] !== 1'bx ) && ( HI_prev[19] !== HI_expected_prev[19] )
		&& ((HI_expected_prev[19] !== last_HI_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[19] = HI_expected_prev[19];
	end
	if (
		( HI_expected_prev[20] !== 1'bx ) && ( HI_prev[20] !== HI_expected_prev[20] )
		&& ((HI_expected_prev[20] !== last_HI_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[20] = HI_expected_prev[20];
	end
	if (
		( HI_expected_prev[21] !== 1'bx ) && ( HI_prev[21] !== HI_expected_prev[21] )
		&& ((HI_expected_prev[21] !== last_HI_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[21] = HI_expected_prev[21];
	end
	if (
		( HI_expected_prev[22] !== 1'bx ) && ( HI_prev[22] !== HI_expected_prev[22] )
		&& ((HI_expected_prev[22] !== last_HI_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[22] = HI_expected_prev[22];
	end
	if (
		( HI_expected_prev[23] !== 1'bx ) && ( HI_prev[23] !== HI_expected_prev[23] )
		&& ((HI_expected_prev[23] !== last_HI_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[23] = HI_expected_prev[23];
	end
	if (
		( HI_expected_prev[24] !== 1'bx ) && ( HI_prev[24] !== HI_expected_prev[24] )
		&& ((HI_expected_prev[24] !== last_HI_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[24] = HI_expected_prev[24];
	end
	if (
		( HI_expected_prev[25] !== 1'bx ) && ( HI_prev[25] !== HI_expected_prev[25] )
		&& ((HI_expected_prev[25] !== last_HI_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[25] = HI_expected_prev[25];
	end
	if (
		( HI_expected_prev[26] !== 1'bx ) && ( HI_prev[26] !== HI_expected_prev[26] )
		&& ((HI_expected_prev[26] !== last_HI_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[26] = HI_expected_prev[26];
	end
	if (
		( HI_expected_prev[27] !== 1'bx ) && ( HI_prev[27] !== HI_expected_prev[27] )
		&& ((HI_expected_prev[27] !== last_HI_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[27] = HI_expected_prev[27];
	end
	if (
		( HI_expected_prev[28] !== 1'bx ) && ( HI_prev[28] !== HI_expected_prev[28] )
		&& ((HI_expected_prev[28] !== last_HI_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[28] = HI_expected_prev[28];
	end
	if (
		( HI_expected_prev[29] !== 1'bx ) && ( HI_prev[29] !== HI_expected_prev[29] )
		&& ((HI_expected_prev[29] !== last_HI_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[29] = HI_expected_prev[29];
	end
	if (
		( HI_expected_prev[30] !== 1'bx ) && ( HI_prev[30] !== HI_expected_prev[30] )
		&& ((HI_expected_prev[30] !== last_HI_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[30] = HI_expected_prev[30];
	end
	if (
		( HI_expected_prev[31] !== 1'bx ) && ( HI_prev[31] !== HI_expected_prev[31] )
		&& ((HI_expected_prev[31] !== last_HI_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HI_exp[31] = HI_expected_prev[31];
	end
	if (
		( LO_expected_prev[0] !== 1'bx ) && ( LO_prev[0] !== LO_expected_prev[0] )
		&& ((LO_expected_prev[0] !== last_LO_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[0] = LO_expected_prev[0];
	end
	if (
		( LO_expected_prev[1] !== 1'bx ) && ( LO_prev[1] !== LO_expected_prev[1] )
		&& ((LO_expected_prev[1] !== last_LO_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[1] = LO_expected_prev[1];
	end
	if (
		( LO_expected_prev[2] !== 1'bx ) && ( LO_prev[2] !== LO_expected_prev[2] )
		&& ((LO_expected_prev[2] !== last_LO_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[2] = LO_expected_prev[2];
	end
	if (
		( LO_expected_prev[3] !== 1'bx ) && ( LO_prev[3] !== LO_expected_prev[3] )
		&& ((LO_expected_prev[3] !== last_LO_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[3] = LO_expected_prev[3];
	end
	if (
		( LO_expected_prev[4] !== 1'bx ) && ( LO_prev[4] !== LO_expected_prev[4] )
		&& ((LO_expected_prev[4] !== last_LO_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[4] = LO_expected_prev[4];
	end
	if (
		( LO_expected_prev[5] !== 1'bx ) && ( LO_prev[5] !== LO_expected_prev[5] )
		&& ((LO_expected_prev[5] !== last_LO_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[5] = LO_expected_prev[5];
	end
	if (
		( LO_expected_prev[6] !== 1'bx ) && ( LO_prev[6] !== LO_expected_prev[6] )
		&& ((LO_expected_prev[6] !== last_LO_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[6] = LO_expected_prev[6];
	end
	if (
		( LO_expected_prev[7] !== 1'bx ) && ( LO_prev[7] !== LO_expected_prev[7] )
		&& ((LO_expected_prev[7] !== last_LO_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[7] = LO_expected_prev[7];
	end
	if (
		( LO_expected_prev[8] !== 1'bx ) && ( LO_prev[8] !== LO_expected_prev[8] )
		&& ((LO_expected_prev[8] !== last_LO_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[8] = LO_expected_prev[8];
	end
	if (
		( LO_expected_prev[9] !== 1'bx ) && ( LO_prev[9] !== LO_expected_prev[9] )
		&& ((LO_expected_prev[9] !== last_LO_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[9] = LO_expected_prev[9];
	end
	if (
		( LO_expected_prev[10] !== 1'bx ) && ( LO_prev[10] !== LO_expected_prev[10] )
		&& ((LO_expected_prev[10] !== last_LO_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[10] = LO_expected_prev[10];
	end
	if (
		( LO_expected_prev[11] !== 1'bx ) && ( LO_prev[11] !== LO_expected_prev[11] )
		&& ((LO_expected_prev[11] !== last_LO_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[11] = LO_expected_prev[11];
	end
	if (
		( LO_expected_prev[12] !== 1'bx ) && ( LO_prev[12] !== LO_expected_prev[12] )
		&& ((LO_expected_prev[12] !== last_LO_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[12] = LO_expected_prev[12];
	end
	if (
		( LO_expected_prev[13] !== 1'bx ) && ( LO_prev[13] !== LO_expected_prev[13] )
		&& ((LO_expected_prev[13] !== last_LO_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[13] = LO_expected_prev[13];
	end
	if (
		( LO_expected_prev[14] !== 1'bx ) && ( LO_prev[14] !== LO_expected_prev[14] )
		&& ((LO_expected_prev[14] !== last_LO_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[14] = LO_expected_prev[14];
	end
	if (
		( LO_expected_prev[15] !== 1'bx ) && ( LO_prev[15] !== LO_expected_prev[15] )
		&& ((LO_expected_prev[15] !== last_LO_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[15] = LO_expected_prev[15];
	end
	if (
		( LO_expected_prev[16] !== 1'bx ) && ( LO_prev[16] !== LO_expected_prev[16] )
		&& ((LO_expected_prev[16] !== last_LO_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[16] = LO_expected_prev[16];
	end
	if (
		( LO_expected_prev[17] !== 1'bx ) && ( LO_prev[17] !== LO_expected_prev[17] )
		&& ((LO_expected_prev[17] !== last_LO_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[17] = LO_expected_prev[17];
	end
	if (
		( LO_expected_prev[18] !== 1'bx ) && ( LO_prev[18] !== LO_expected_prev[18] )
		&& ((LO_expected_prev[18] !== last_LO_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[18] = LO_expected_prev[18];
	end
	if (
		( LO_expected_prev[19] !== 1'bx ) && ( LO_prev[19] !== LO_expected_prev[19] )
		&& ((LO_expected_prev[19] !== last_LO_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[19] = LO_expected_prev[19];
	end
	if (
		( LO_expected_prev[20] !== 1'bx ) && ( LO_prev[20] !== LO_expected_prev[20] )
		&& ((LO_expected_prev[20] !== last_LO_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[20] = LO_expected_prev[20];
	end
	if (
		( LO_expected_prev[21] !== 1'bx ) && ( LO_prev[21] !== LO_expected_prev[21] )
		&& ((LO_expected_prev[21] !== last_LO_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[21] = LO_expected_prev[21];
	end
	if (
		( LO_expected_prev[22] !== 1'bx ) && ( LO_prev[22] !== LO_expected_prev[22] )
		&& ((LO_expected_prev[22] !== last_LO_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[22] = LO_expected_prev[22];
	end
	if (
		( LO_expected_prev[23] !== 1'bx ) && ( LO_prev[23] !== LO_expected_prev[23] )
		&& ((LO_expected_prev[23] !== last_LO_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[23] = LO_expected_prev[23];
	end
	if (
		( LO_expected_prev[24] !== 1'bx ) && ( LO_prev[24] !== LO_expected_prev[24] )
		&& ((LO_expected_prev[24] !== last_LO_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[24] = LO_expected_prev[24];
	end
	if (
		( LO_expected_prev[25] !== 1'bx ) && ( LO_prev[25] !== LO_expected_prev[25] )
		&& ((LO_expected_prev[25] !== last_LO_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[25] = LO_expected_prev[25];
	end
	if (
		( LO_expected_prev[26] !== 1'bx ) && ( LO_prev[26] !== LO_expected_prev[26] )
		&& ((LO_expected_prev[26] !== last_LO_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[26] = LO_expected_prev[26];
	end
	if (
		( LO_expected_prev[27] !== 1'bx ) && ( LO_prev[27] !== LO_expected_prev[27] )
		&& ((LO_expected_prev[27] !== last_LO_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[27] = LO_expected_prev[27];
	end
	if (
		( LO_expected_prev[28] !== 1'bx ) && ( LO_prev[28] !== LO_expected_prev[28] )
		&& ((LO_expected_prev[28] !== last_LO_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[28] = LO_expected_prev[28];
	end
	if (
		( LO_expected_prev[29] !== 1'bx ) && ( LO_prev[29] !== LO_expected_prev[29] )
		&& ((LO_expected_prev[29] !== last_LO_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[29] = LO_expected_prev[29];
	end
	if (
		( LO_expected_prev[30] !== 1'bx ) && ( LO_prev[30] !== LO_expected_prev[30] )
		&& ((LO_expected_prev[30] !== last_LO_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[30] = LO_expected_prev[30];
	end
	if (
		( LO_expected_prev[31] !== 1'bx ) && ( LO_prev[31] !== LO_expected_prev[31] )
		&& ((LO_expected_prev[31] !== last_LO_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LO_exp[31] = LO_expected_prev[31];
	end
	if (
		( counter_expected_prev[0] !== 1'bx ) && ( counter_prev[0] !== counter_expected_prev[0] )
		&& ((counter_expected_prev[0] !== last_counter_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[0] = counter_expected_prev[0];
	end
	if (
		( counter_expected_prev[1] !== 1'bx ) && ( counter_prev[1] !== counter_expected_prev[1] )
		&& ((counter_expected_prev[1] !== last_counter_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[1] = counter_expected_prev[1];
	end
	if (
		( counter_expected_prev[2] !== 1'bx ) && ( counter_prev[2] !== counter_expected_prev[2] )
		&& ((counter_expected_prev[2] !== last_counter_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[2] = counter_expected_prev[2];
	end
	if (
		( counter_expected_prev[3] !== 1'bx ) && ( counter_prev[3] !== counter_expected_prev[3] )
		&& ((counter_expected_prev[3] !== last_counter_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[3] = counter_expected_prev[3];
	end
	if (
		( counter_expected_prev[4] !== 1'bx ) && ( counter_prev[4] !== counter_expected_prev[4] )
		&& ((counter_expected_prev[4] !== last_counter_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[4] = counter_expected_prev[4];
	end
	if (
		( counter_expected_prev[5] !== 1'bx ) && ( counter_prev[5] !== counter_expected_prev[5] )
		&& ((counter_expected_prev[5] !== last_counter_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[5] = counter_expected_prev[5];
	end
	if (
		( div0_expected_prev !== 1'bx ) && ( div0_prev !== div0_expected_prev )
		&& ((div0_expected_prev !== last_div0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div0_expected_prev);
		$display ("     Real value = %b", div0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_div0_exp = div0_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Div_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg clk;
reg reset;
// wires                                               
wire [31:0] HI;
wire [31:0] LO;
wire [5:0] counter;
wire div0;

wire sampler;                             

// assign statements (if any)                          
Div i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.HI(HI),
	.LO(LO),
	.clk(clk),
	.counter(counter),
	.div0(div0),
	.reset(reset)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

Div_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

Div_vlg_check_tst tb_out(
	.HI(HI),
	.LO(LO),
	.counter(counter),
	.div0(div0),
	.sampler_rx(sampler)
);
endmodule

